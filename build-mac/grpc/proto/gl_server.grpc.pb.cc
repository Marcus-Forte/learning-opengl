// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/gl_server.proto

#include "proto/gl_server.pb.h"
#include "proto/gl_server.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace gl {

static const char* addToScene_method_names[] = {
  "/gl.addToScene/addPoint",
  "/gl.addToScene/addPointCloud",
  "/gl.addToScene/streamPointClouds",
  "/gl.addToScene/streamNamedPoints",
  "/gl.addToScene/resetScene",
};

std::unique_ptr< addToScene::Stub> addToScene::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< addToScene::Stub> stub(new addToScene::Stub(channel, options));
  return stub;
}

addToScene::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_addPoint_(addToScene_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_addPointCloud_(addToScene_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_streamPointClouds_(addToScene_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_streamNamedPoints_(addToScene_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_resetScene_(addToScene_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status addToScene::Stub::addPoint(::grpc::ClientContext* context, const ::gl::Point3& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gl::Point3, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_addPoint_, context, request, response);
}

void addToScene::Stub::async::addPoint(::grpc::ClientContext* context, const ::gl::Point3* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gl::Point3, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_addPoint_, context, request, response, std::move(f));
}

void addToScene::Stub::async::addPoint(::grpc::ClientContext* context, const ::gl::Point3* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_addPoint_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* addToScene::Stub::PrepareAsyncaddPointRaw(::grpc::ClientContext* context, const ::gl::Point3& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::gl::Point3, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_addPoint_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* addToScene::Stub::AsyncaddPointRaw(::grpc::ClientContext* context, const ::gl::Point3& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncaddPointRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status addToScene::Stub::addPointCloud(::grpc::ClientContext* context, const ::gl::PointCloud3& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gl::PointCloud3, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_addPointCloud_, context, request, response);
}

void addToScene::Stub::async::addPointCloud(::grpc::ClientContext* context, const ::gl::PointCloud3* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gl::PointCloud3, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_addPointCloud_, context, request, response, std::move(f));
}

void addToScene::Stub::async::addPointCloud(::grpc::ClientContext* context, const ::gl::PointCloud3* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_addPointCloud_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* addToScene::Stub::PrepareAsyncaddPointCloudRaw(::grpc::ClientContext* context, const ::gl::PointCloud3& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::gl::PointCloud3, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_addPointCloud_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* addToScene::Stub::AsyncaddPointCloudRaw(::grpc::ClientContext* context, const ::gl::PointCloud3& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncaddPointCloudRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientWriter< ::gl::PointCloud3>* addToScene::Stub::streamPointCloudsRaw(::grpc::ClientContext* context, ::google::protobuf::Empty* response) {
  return ::grpc::internal::ClientWriterFactory< ::gl::PointCloud3>::Create(channel_.get(), rpcmethod_streamPointClouds_, context, response);
}

void addToScene::Stub::async::streamPointClouds(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::ClientWriteReactor< ::gl::PointCloud3>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::gl::PointCloud3>::Create(stub_->channel_.get(), stub_->rpcmethod_streamPointClouds_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::gl::PointCloud3>* addToScene::Stub::AsyncstreamPointCloudsRaw(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::gl::PointCloud3>::Create(channel_.get(), cq, rpcmethod_streamPointClouds_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::gl::PointCloud3>* addToScene::Stub::PrepareAsyncstreamPointCloudsRaw(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::gl::PointCloud3>::Create(channel_.get(), cq, rpcmethod_streamPointClouds_, context, response, false, nullptr);
}

::grpc::ClientWriter< ::gl::NamedPoint3>* addToScene::Stub::streamNamedPointsRaw(::grpc::ClientContext* context, ::google::protobuf::Empty* response) {
  return ::grpc::internal::ClientWriterFactory< ::gl::NamedPoint3>::Create(channel_.get(), rpcmethod_streamNamedPoints_, context, response);
}

void addToScene::Stub::async::streamNamedPoints(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::ClientWriteReactor< ::gl::NamedPoint3>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::gl::NamedPoint3>::Create(stub_->channel_.get(), stub_->rpcmethod_streamNamedPoints_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::gl::NamedPoint3>* addToScene::Stub::AsyncstreamNamedPointsRaw(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::gl::NamedPoint3>::Create(channel_.get(), cq, rpcmethod_streamNamedPoints_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::gl::NamedPoint3>* addToScene::Stub::PrepareAsyncstreamNamedPointsRaw(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::gl::NamedPoint3>::Create(channel_.get(), cq, rpcmethod_streamNamedPoints_, context, response, false, nullptr);
}

::grpc::Status addToScene::Stub::resetScene(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_resetScene_, context, request, response);
}

void addToScene::Stub::async::resetScene(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_resetScene_, context, request, response, std::move(f));
}

void addToScene::Stub::async::resetScene(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_resetScene_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* addToScene::Stub::PrepareAsyncresetSceneRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_resetScene_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* addToScene::Stub::AsyncresetSceneRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncresetSceneRaw(context, request, cq);
  result->StartCall();
  return result;
}

addToScene::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      addToScene_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< addToScene::Service, ::gl::Point3, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](addToScene::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gl::Point3* req,
             ::google::protobuf::Empty* resp) {
               return service->addPoint(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      addToScene_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< addToScene::Service, ::gl::PointCloud3, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](addToScene::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gl::PointCloud3* req,
             ::google::protobuf::Empty* resp) {
               return service->addPointCloud(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      addToScene_method_names[2],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< addToScene::Service, ::gl::PointCloud3, ::google::protobuf::Empty>(
          [](addToScene::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::gl::PointCloud3>* reader,
             ::google::protobuf::Empty* resp) {
               return service->streamPointClouds(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      addToScene_method_names[3],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< addToScene::Service, ::gl::NamedPoint3, ::google::protobuf::Empty>(
          [](addToScene::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::gl::NamedPoint3>* reader,
             ::google::protobuf::Empty* resp) {
               return service->streamNamedPoints(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      addToScene_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< addToScene::Service, ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](addToScene::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::google::protobuf::Empty* resp) {
               return service->resetScene(ctx, req, resp);
             }, this)));
}

addToScene::Service::~Service() {
}

::grpc::Status addToScene::Service::addPoint(::grpc::ServerContext* context, const ::gl::Point3* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status addToScene::Service::addPointCloud(::grpc::ServerContext* context, const ::gl::PointCloud3* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status addToScene::Service::streamPointClouds(::grpc::ServerContext* context, ::grpc::ServerReader< ::gl::PointCloud3>* reader, ::google::protobuf::Empty* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status addToScene::Service::streamNamedPoints(::grpc::ServerContext* context, ::grpc::ServerReader< ::gl::NamedPoint3>* reader, ::google::protobuf::Empty* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status addToScene::Service::resetScene(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace gl

